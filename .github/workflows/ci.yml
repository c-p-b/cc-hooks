name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  NODE_VERSION: '20'

jobs:
  # Quick checks - run in parallel for speed
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
      
      - uses: actions/setup-node@60edb5dd545a775178f52524783378180af0d1f8 # v4.0.2
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Cache npm
        uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809 # v4.0.2
        with:
          path: ~/.npm
          key: npm-${{ runner.os }}-${{ hashFiles('package-lock.json') }}
          restore-keys: npm-${{ runner.os }}-
      
      - run: npm ci --prefer-offline --no-audit
      - run: npm run lint

  format:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
      
      - uses: actions/setup-node@60edb5dd545a775178f52524783378180af0d1f8 # v4.0.2
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Cache npm
        uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809 # v4.0.2
        with:
          path: ~/.npm
          key: npm-${{ runner.os }}-${{ hashFiles('package-lock.json') }}
          restore-keys: npm-${{ runner.os }}-
      
      - run: npm ci --prefer-offline --no-audit
      - run: npm run format:check

  # Build once, use everywhere
  build:
    runs-on: ubuntu-latest
    outputs:
      cache-key: ${{ steps.cache-key.outputs.key }}
    steps:
      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
      
      - uses: actions/setup-node@60edb5dd545a775178f52524783378180af0d1f8 # v4.0.2
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Cache npm
        uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809 # v4.0.2
        with:
          path: ~/.npm
          key: npm-${{ runner.os }}-${{ hashFiles('package-lock.json') }}
          restore-keys: npm-${{ runner.os }}-
      
      - name: Generate cache key
        id: cache-key
        run: echo "key=ts-build-${{ runner.os }}-${{ hashFiles('src/**/*.ts', 'tsconfig.json') }}" >> $GITHUB_OUTPUT
      
      - name: Cache TypeScript build
        uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809 # v4.0.2
        with:
          path: |
            dist
            tsconfig.tsbuildinfo
          key: ${{ steps.cache-key.outputs.key }}
      
      - run: npm ci --prefer-offline --no-audit
      - run: npm run build
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@26f96dfa697d77e81fd5907df203aa23a56210a8 # v4.3.0
        with:
          name: dist
          path: dist/
          retention-days: 1

  # Test on Node 20 (LTS) and 22 (current)
  test:
    needs: [build]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node: ['20', '22']
      fail-fast: false
    steps:
      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
      
      - uses: actions/setup-node@60edb5dd545a775178f52524783378180af0d1f8 # v4.0.2
        with:
          node-version: ${{ matrix.node }}
          cache: 'npm'
      
      - name: Cache npm
        uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809 # v4.0.2
        with:
          path: ~/.npm
          key: npm-${{ runner.os }}-${{ hashFiles('package-lock.json') }}
          restore-keys: npm-${{ runner.os }}-
      
      - run: npm ci --prefer-offline --no-audit
      
      - name: Download build artifacts
        uses: actions/download-artifact@6b208ae046db98c579e8a3aa621ab581ff575935 # v4.1.1
        with:
          name: dist
          path: dist/
      
      - run: npm test
      
      - name: CLI smoke test
        run: |
          npm link
          cc-hooks --version
          cc-hooks --help

  # Release job - only on main branch
  release:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: [lint, format, build, test]
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
    steps:
      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - uses: actions/setup-node@60edb5dd545a775178f52524783378180af0d1f8 # v4.0.2
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          registry-url: 'https://registry.npmjs.org'
      
      - run: npm ci --prefer-offline --no-audit
      
      - name: Download build artifacts
        uses: actions/download-artifact@6b208ae046db98c579e8a3aa621ab581ff575935 # v4.1.1
        with:
          name: dist
          path: dist/
      
      - name: Bump version if needed
        id: version
        run: |
          # Get the commit message
          COMMIT_MSG="${{ github.event.head_commit.message }}"
          echo "Checking commit: $COMMIT_MSG"
          
          # Skip if it's a release commit
          if [[ "$COMMIT_MSG" == *"[skip ci]"* ]] || [[ "$COMMIT_MSG" == *"[skip-ci]"* ]]; then
            echo "Skip CI flag found"
            echo "should_release=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Try to bump version (script will exit 0 if no bump needed)
          if node scripts/bump-version.mjs "$COMMIT_MSG"; then
            # Check if version actually changed
            if git diff --quiet package.json; then
              echo "No version change needed"
              echo "should_release=false" >> $GITHUB_OUTPUT
            else
              NEW_VERSION=$(node -p "require('./package.json').version")
              echo "Version bumped to $NEW_VERSION"
              echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
              echo "should_release=true" >> $GITHUB_OUTPUT
            fi
          else
            echo "should_release=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Commit version bump
        if: steps.version.outputs.should_release == 'true'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          git add package.json package-lock.json CHANGELOG.md
          git commit -m "chore: release v${{ steps.version.outputs.version }} [skip ci]"
          git tag -a "v${{ steps.version.outputs.version }}" -m "Release v${{ steps.version.outputs.version }}"
          
          git push origin main --follow-tags
      
      # COMMENTED OUT FOR NOW - Uncomment when ready to publish
      # - name: Publish to NPM
      #   if: steps.version.outputs.should_release == 'true'
      #   run: npm publish --provenance --access public
      #   env:
      #     NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      
      # - name: Create GitHub Release
      #   if: steps.version.outputs.should_release == 'true'
      #   uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
      #   with:
      #     script: |
      #       const version = '${{ steps.version.outputs.version }}';
      #       const changelog = require('fs').readFileSync('CHANGELOG.md', 'utf8');
      #       
      #       // Extract latest version's changes
      #       const versionHeader = `## [${version}]`;
      #       const startIdx = changelog.indexOf(versionHeader);
      #       let endIdx = changelog.indexOf('\n## [', startIdx + 1);
      #       if (endIdx === -1) endIdx = changelog.length;
      #       
      #       const releaseNotes = changelog.substring(startIdx, endIdx).trim();
      #       
      #       await github.rest.repos.createRelease({
      #         owner: context.repo.owner,
      #         repo: context.repo.repo,
      #         tag_name: `v${version}`,
      #         name: `Release v${version}`,
      #         body: releaseNotes,
      #         draft: false,
      #         prerelease: false
      #       });